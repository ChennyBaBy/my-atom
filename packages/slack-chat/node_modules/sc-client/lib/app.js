// Generated by CoffeeScript 1.8.0
(function() {
  var SlackClient, WebSocket, express, needle, open,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  express = require('express');

  needle = require('needle');

  open = require('open');

  WebSocket = require('ws');

  SlackClient = (function() {
    var instance;

    instance = null;

    function SlackClient(clientId, clientSecret, token, port) {
      this.clientId = clientId;
      this.clientSecret = clientSecret;
      if (token == null) {
        token = null;
      }
      this.port = port != null ? port : 36347;
      this.webSocket = __bind(this.webSocket, this);
      this.rtmUrl = __bind(this.rtmUrl, this);
      this.startServer = __bind(this.startServer, this);
      this.getTokenFromSlack = __bind(this.getTokenFromSlack, this);
      this.initClient = __bind(this.initClient, this);
      this.addSubscriber = __bind(this.addSubscriber, this);
      if (instance) {
        return instance;
      } else {
        instance = this;
      }
      this.app = express();
      this.subscribers = [];
      this.startServer();
      if (token != null) {
        this.initClient(token);
      } else {
        this.getTokenFromSlack();
      }
    }

    SlackClient.prototype.addSubscriber = function(sub) {
      return this.subscribers.push(sub);
    };

    SlackClient.prototype.apiPath = function(path, data) {
      var key, params, val;
      params = "";
      for (key in data) {
        val = data[key];
        params += "&" + key + "=" + val;
      }
      return "https://slack.com/api/" + path + (params != null ? "?" + (params.substring(1)) : "");
    };

    SlackClient.getInstance = function() {
      return new SlackClient;
    };

    SlackClient.prototype.redirectUri = function() {
      return "http://0.0.0.0:" + this.port + "/oauth";
    };

    SlackClient.prototype.initClient = function(token) {
      this.token = token;
      return this.rtmUrl(token);
    };

    SlackClient.prototype.getTokenFromSlack = function() {
      open("https://slack.com/oauth/authorize?client_id=" + this.clientId + "&redirect_uri=" + (this.redirectUri()) + "&scope=read,post,client&state=scstate");
      return this.app.get('/oauth', (function(_this) {
        return function(req, res) {
          var data;
          console.log("returned to route");
          res.send("Using code " + req.query.code + " to retrieve token. <br><br>You can close this window now.");
          data = {
            client_id: _this.clientId,
            client_secret: _this.clientSecret,
            code: req.query.code,
            redirect_uri: _this.redirectUri()
          };
          return needle.get(_this.apiPath('oauth.access', data), function(err, resp) {
            return _this.initClient(resp.body.access_token);
          });
        };
      })(this));
    };

    SlackClient.prototype.startServer = function() {
      var server;
      return server = this.app.listen(this.port, function() {
        var host, port;
        host = server.address().address;
        return port = server.address().port;
      }).on('error', (function(_this) {
        return function(err) {
          return console.log(err);
        };
      })(this));
    };

    SlackClient.prototype.rtmUrl = function(token) {
      return needle.get(this.apiPath('rtm.start', {
        token: token
      }), (function(_this) {
        return function(err, resp) {
          _this.team = resp.body.team;
          _this.ims = resp.body.ims;
          _this.channels = resp.body.channels;
          _this.groups = resp.body.groups;
          _this.me = resp.body.self;
          _this.users = resp.body.users;
          _this.bots = resp.body.bots;
          return _this.webSocket(resp.body.url);
        };
      })(this));
    };

    SlackClient.prototype.webSocket = function(url) {
      this.client = new WebSocket(url);
      return this.client.on('message', (function(_this) {
        return function(message) {
          var sub, _i, _len, _ref, _results;
          _ref = _this.subscribers;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            sub = _ref[_i];
            _results.push(sub(message));
          }
          return _results;
        };
      })(this));
    };

    SlackClient.prototype.get = function(method, data, callback) {
      if (data == null) {
        data = {};
      }
      data["token"] = this.token;
      return needle.get(this.apiPath(method, data), (function(_this) {
        return function(err, resp) {
          return callback(err, resp);
        };
      })(this));
    };

    SlackClient.prototype.post = function(method, data, options, callback) {
      if (data == null) {
        data = {};
      }
      if (options == null) {
        options = {};
      }
      data["token"] = this.token;
      return needle.post(this.apiPath(method), data, options, (function(_this) {
        return function(err, resp) {
          return callback(err, resp);
        };
      })(this));
    };

    return SlackClient;

  })();

  exports.slackClient = SlackClient;

}).call(this);
